Parameters:
  VPC0001Name:
    Type: String
    Default: vpc0001.us-east-1.awcl
  VPC0001Cidr:
    Type: String
    Default: 172.16.0.0/16
  VPC0001SubnetPublic0001Name:
    Type: String
    Default: 0001.public.vpc0001.us-east-1.awcl
  VPC0001SubnetPublic0002Name:
    Type: String
    Default: 0002.public.vpc0001.us-east-1.awcl
  VPC0001SubnetInternal0001Name:
    Type: String
    Default: 0001.internal.vpc0001.us-east-1.awcl
  VPC0001SubnetInternal0002Name:
    Type: String
    Default: 0002.internal.vpc0001.us-east-1.awcl
  VPC0001SubnetPublic0001Cidr:
    Type: String
    Default: 172.16.101.0/24
  VPC0001SubnetPublic0002Cidr:
    Type: String
    Default: 172.16.102.0/24
  VPC0001SubnetInternal0001Cidr:
    Type: String
    Default: 172.16.201.0/24
  VPC0001SubnetInternal0002Cidr:
    Type: String
    Default: 172.16.202.0/24
  IGW0001Name:
    Type: String
    Default: 0001.igw.us-east-1.awcl
  VPC0001KeyName0001:
    Type: String
    Default: 0001.key.us-east-1.awcl
  VPC0001KeyPublicMaterial0001:
    Type: String
    Default: ""


Resources:
  VPC0001:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC0001Cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPC0001Name

  VPC0001IPv6:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC0001
      AmazonProvidedIpv6CidrBlock: true
  
  InternetGateway0001:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IGW0001Name

  InternetGatewayAttachment0001:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway0001
      VpcId: !Ref VPC0001

  PublicSubnet0001:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0001
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref VPC0001SubnetPublic0001Cidr
      Ipv6CidrBlock: !Select [0, !Cidr [!GetAtt VPC0001.Ipv6CidrBlocks, 3, 64]]
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Ref VPC0001SubnetPublic0001Name

  PublicSubnet0002:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0001
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref VPC0001SubnetPublic0002Cidr
      Ipv6CidrBlock: !Select [1, !Cidr [!GetAtt VPC0001.Ipv6CidrBlocks, 3, 64]]
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Ref VPC0001SubnetPublic0002Name

  InternalSubnet0001:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0001
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref VPC0001SubnetInternal0001Cidr
      Ipv6CidrBlock: !Select [2, !Cidr [!GetAtt VPC0001.Ipv6CidrBlocks, 3, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Ref VPC0001SubnetInternal0001Name

  InternalSubnet0002:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0001
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref VPC0001SubnetInternal0002Cidr
      Ipv6CidrBlock: !Select [3, !Cidr [!GetAtt VPC0001.Ipv6CidrBlocks, 3, 64]]
      MapPublicIpOnLaunch: false
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Ref VPC0001SubnetInternal0002Name

  PublicRouteTable0001:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC0001
      Tags:
        - Key: Name
          Value: !Sub ${VPC0001Name} Public RTB 0001

  InternalRouteTable0001:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC0001
      Tags:
        - Key: Name
          Value: !Sub ${VPC0001Name} Internal RTB 0001

  DefaultPublicRoute0001:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable0001
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway0001

  DefaultPublicRoute0002:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable0001
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway0001

  PublicSubnet0001RouteTableAssoc0001:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable0001
      SubnetId: !Ref PublicSubnet0001

  PublicSubnet0002RouteTableAssoc0001:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable0001
      SubnetId: !Ref PublicSubnet0002

  InternalSubnet0001RouteTableAssoc0001:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternalRouteTable0001
      SubnetId: !Ref InternalSubnet0001

  InternalSubnet0002RouteTableAssoc0001:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternalRouteTable0001
      SubnetId: !Ref InternalSubnet0002

  PublicSecurityGroup0001:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all Egress, Allow all Ingress, Dual-Stack"
      GroupName: "allow-egress-all-allow-ingress-all"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      VpcId: !Ref VPC0001

  PublicSecurityGroup0002:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all Egress, Allow SSH Ingress, Dual-Stack"
      GroupName: "allow-egress-all-allow-ingress-ssh"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
        - CidrIpv6: ::/0
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      VpcId: !Ref VPC0001

  InternalSecurityGroup0001:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all Egress, Allow No Ingress, Dual-Stack"
      GroupName: "allow-egress-all-allow-ingress-no"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      VpcId: !Ref VPC0001

  InternalSecurityGroup0002:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all Egress, Allow all VPC Ingress, Dual-Stack"
      GroupName: "allow-egress-all-allow-ingress-allvpc"
      SecurityGroupIngress:
        - CidrIp: !Ref VPC0001Cidr
          IpProtocol: "-1"
        - CidrIpv6: !GetAtt VPC0001.Ipv6CidrBlocks
          IpProtocol: "-1"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      VpcId: !Ref VPC0001

  VPC0001KeyPair0001:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Ref VPC0001KeyName0001
      PublicKeyMaterial: !Ref VPC0001KeyPublicMaterial0001
